{-# OPTIONS_GHC -Wall #-}
module Task.Error.Make where

import qualified Data.List as List
import qualified Elm.Compiler as Compiler
import qualified Elm.Compiler.Module as Module
import qualified Elm.Package as Pkg

import qualified Fetch.Artifacts.Paths as Paths
import qualified TheMasterPlan as TMP


-- ERRORS

data Error
    = BadFlags
    | CompilerErrors FilePath String [Compiler.Error]
    | CorruptedArtifact FilePath
    | Cycle [TMP.CanonicalModule]
    | PackageProblem String
    | MissingPackage Pkg.Name


toString :: Error -> String
toString err =
  case err of
    BadFlags ->
        error "TODO bad flags"

    CompilerErrors _ _ _ ->
        error "TODO"

    CorruptedArtifact filePath ->
        concat
          [ "Error reading build artifact ", filePath, "\n"
          , "    The file was generated by a previous build and may be outdated or corrupt.\n"
          , "    Please remove the file and try again."
          ]

    Cycle moduleCycle ->
        "Your dependencies form a cycle:\n\n"
        ++ drawCycle moduleCycle
        ++ "\nYou may need to move some values to a new module to get rid of the cycle."

    PackageProblem msg ->
        msg

    MissingPackage name ->
        error "TODO" name


drawCycle :: [TMP.CanonicalModule] -> String
drawCycle modules =
  let
    topLine=
        "  ┌─────┐"

    line (TMP.CanonicalModule _ name) =
        "  │    " ++ Module.nameToString name

    midLine =
        "  │     ↓"

    bottomLine =
        "  └─────┘"
  in
    unlines (topLine : List.intersperse midLine (map line modules) ++ [ bottomLine ])

